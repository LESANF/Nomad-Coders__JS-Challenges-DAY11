<HTML, CSS>

모두 span으로 만들었고
0~9 버튼
+, -, *, / 연산버튼
= 결과버튼
C 초기화버튼 

< JS >

DOM으로 받아오기위해 변수선언.

const result = document.querySelector(".js-result"); // 보여지는창
const reset = document.querySelector(".js-reset"); // C
const equals = document.querySelector(".js-equals"); // =
const numbers = Array.from(document.querySelectorAll(".js-number")); // NUM
const operations = Array.from(document.querySelectorAll(".js-operation")); //+,-,*,/

한개 이상의 DOM을 불러올때는 querySelectorAll로 받아온다.

여기서 Array.from(document.queryselectorAll~~)로 받는것과 

document.queryselectorAll로 받는것의 차이가있다.

앞의 Array는 타입을 Array식으로 받아오고 후자는 NodeList로 받아온다.

DOM을 받아왔으면, 변수를 정의한다 타입은 let이다 값이 바뀔것이기 때문.

4개의 addEventListener가 일어난다. ( 숫자누르기, 연산버튼누르기, 결과버튼, 초기화버튼 )

---------------------------------------------------------------------------------------------------

< 숫자를 눌렀을 때 >

numbers.forEach(function(number) {
  number.addEventListener("click", handleNumberClick);
});

DOM으로 호출해서 불러온 array형식의 span들의 모음을 읽고, "click" 눌렀을때 handleNumberClick함수로 이동한다.

->handleNumberClick
->function handleNUmberClick(e)로 선언하고 이벤트 매개변수를 받는다.
내부에 const형식의 clicknum 변수명으로 e.target.innerText를 담는다. HTML에서 span에 넣었던 text값.

 if (!firstDone) {
    firstValue = firstValue + clickedNum;
    result.innerHTML = firstValue;
  }

-> 다음과 같은 조건이 실행되는데. firstDone이 not이면 if문이 작동한다.

firstDone은 let firstDone으로 선언만 되어있는 상태이고. 아무 값도없다.

firstDone에 값이 있었으면. if(firstDone)일 경우 true이다. 하지만 값이 없기 때문에 false이다.

하지만 해당코드는 if(!firstDone)이다. firstDone이 값이 없을경우에 true인것이다.

아무것도 없는 상태이며, 다음 식이 실행된다.

firstValue = firstValue + clickedNum; 

firstValue는 "" 공백으로 선언되었고, clickedNum은 e.target.innerText를 담아놓은 변수다.

그리고 result.innerHTML = firstValue; 화면에 담아놓은값을 보여준다. 그리고 함수탈출.

/* 숫자를 연속해서 입력할경우 firstDone은 계속 값이 없기때문에 숫자가 이어써진다.
   더하는 개념이아닌 String형이기때문에 문자열이 합해진다 3과 3을쓰면 33이되는것처럼.
   firstDone이 바뀌는 계기는 다른 함수를 통해 값이 주어질것이다.
*/

--------------------------------------------------------------------------------------------------

<
 else {
    secondValue = secondValue + clickedNum;
    result.innerHTML = secondValue;
    secondDone = true;
  }